1. Object 클래스
1.1 java.lang 패키지 소개
자바는 기본으로 제공하는 라이브러리(클래스 모음) 중에 가장 기본이 되는 것이 바로 java.lang 패키지이다. 여기서 lang 은 language (언어)의 줄임말이다. 쉽게 이야기해서 자바 언어를 이루는 가장 기본이 되는 클래스들을 보관하는 패키지를 뜻한다.

java.lang 패키지의 대표적인 클래스들

Object : 모든 자바 객체의 부모 클래스

String : 문자열

Integer, Long, Double : 래퍼 타입, 기본형 데이터 타입을 객체로 만든 것

Class : 클래스 메타 정보

System : 시스템과 관련된 기본 기능들을 제공

import 생략 가능
java.lang 패키지는 모든 자바 애플리케이션에 자동으로 임포트(import)된다. 따라서 임포트 구문을 사용하지 않아도 된다.

1.2 Object 클래스
자바에서 모든 클래스의 최상위 부모 클래스는 항상 Object 클래스이다.



package lang.object;

// 부모가 없으면 묵시적으로 Object 클래스를 상속받는다.
public class Parent {
	public void parentMethod() {
    	System.out.println("Parent.parentMethod");
    }
}
클래스에서 상속 받을 부모 클래스가 없으면 묵시적으로 Object 클래스를 상속 받는다.
쉽게 이야기해서 자바가 extends Object 코드를 넣어준다.
따라서 extends Object는 생략하는 것을 권장한다.
클래스에서 상속 받을 부모 클래스를 명시적으로 지정하면 Object 를 상속 받지 않는다.
쉽게 이야기해서 이미 명시적으로 상속했기 때문에 자바가 extends Object 코드를 넣지 않는다.
묵시적(Implicit) vs 명시적(Explicit)
묵시적 : 개발자가 코드에 직접 기술하지 않아도 시스템 또는 컴파일러에 의해 자동으로 수행되는 것을 의미
명시적 : 개발자가 코드에 직접 기술해서 작동하는 것을 의미

메모리 생성 구조


Parent 는 Object 를 묵시적으로 상속 받았기 때문에 메모리에도 함께 생성된다.


자바에서 Object 클래스가 최상위 부모 클래스인 이유
모든 클래스가 Object 클래스를 상속 받는 이유는 다음과 같다.

공통 기능 제공

다형성의 기본 구현

공통 기능 제공
객체의 정보를 제공하고, 이 객체가 다른 객체와 같은지 비교하고, 객체가 어떤 클래스로 만들어졌는지 확인하는 기능은 모두 객체에게 필요한 기본 기능이다. 이런 기능을 객체를 만들 때 마다 항상 새로운 메서드를 정의해서 만들어야 한다면 상당히 번거로울 것이다.

그리고 막상 만든다고 해도 개발자마다 서로 다른 이름의 메서드를 만들어서 일관성이 없을 것이다. 예를 들어서 객체의 정보를 제공하는 기능을 만든다고 하면 어떤 개발자는 toString() 으로 또 어떤 개발자는 objectInfo() 와 같이 서로 다른 이름으로 만들 수 있다.

Object 는 모든 객체에 필요한 공통 기능을 제공한다. Object 는 최상위 부모 클래스이기 때문에 모든 객체는 공통 기능을 편리하게 제공(상속) 받을 수 있다.

Object 가 제공하는 기능

객체의 정보를 제공하는 toString()
객체의 같음을 비교하는 equals()
객체의 클래스 정보를 제공하는 getClass()
기타 여러가지 기능
다형성의 기본 구현
부모는 자식을 담을 수 있다. Object 는 모든 클래스의 부모 클래스이다. 따라서 모든 객체를 참조할 수 있다.

Object 클래스는 다형성을 지원하는 기본적인 메커니즘을 제공한다. 모든 자바 객체는 Object 타입으로 처리될 수 있으며, 이는 다양한 타입의 객체를 통합적으로 처리할 수 있게 해준다.

쉽게 이야기 해서 Object 는 모든 객체를 다 담을 수 있다. 타입이 다른 객체들을 어딘가에 보관해야 한다면 바로 Object 에 보관하면 된다.

1.3 Object 다형성
Object 는 모든 클래스의 부모 클래스이다. 따라서 Object 는 모든 객체를 참조할 수 있다.



Dog 와 Car 는 서로 아무런 관련이 없는 클래스이다. 둘다 부모가 없으므로 Object 를 자동으로 상속 받는다.

Object 다형성의 장점
action 메서드

private static void action(Object obj) {
//obj.sound(); //컴파일 오류, Object는 sound()가 없다.
//obj.move(); //컴파일 오류, Object는 move()가 없다.
//객체에 맞는 다운캐스팅 필요
	if (obj instanceof Dog dog) {
    	dog.sound();
	} 
	else if (obj instanceof Car car) {
    	car.move();
	}
}
이 메서드는 Object 타입의 매개변수를 사용한다. 그런데 Object 는 모든 객체의 부모다. 따라서 어떤 객체든지 인자로 전달할 수 있다.